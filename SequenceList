/**
 * 类 {@code SequenceList} 实现顺序表的基本功能.
 *
 * <p>
 * 主要包括1.创建空表 2.构建顺序表 3.正序（反序）遍历 4.添加、插入、删除、查询元素 5.判断（顺序表）是否为空 6.获取顺序表的长度 等功能
 *
 * @author xue
 * @since 2021/10/3
 * @version 1.0
 * @param <T>      数据元素的数据类型
 * @param elements 对象数组存储顺序表的数据元素
 * @param N        顺序表长度
 */
public class SequenceList<T> extends Object {
    Object[] elements;
    int N;

    /**
     * 创建默认容量的空表
     */
    public SequenceList() {
        this(10);
    }

    /**
     * 创建容量为length的空表
     * 
     * @param length 数组存储空间长度
     */
    public SequenceList(int length) {
        // 申请数组的存储空间,数组元素为null
        this.elements = new Object[length];
        this.N = 0;
    }

    /**
     * 传入一个数组,将其转换成顺序表
     * 
     * @param values 被传入元素的数组
     */
    public SequenceList(T[] values) {
        // 创建容量为values.length的空表
        this(values.length);
        // 将数组的值赋予顺序表
        for (int i = 0; i < values.length; i++) {
            this.elements[i] = values[i];
        }
        this.N = elements.length;
    }

    /**
     * 正序遍历
     */
    public String toString() {
        String str = "{";
        if (this.N > 0) {
            str += this.elements[0].toString();
        }
        for (int i = 1; i < this.N; i++) {
            str += "," + this.elements[i].toString();
        }
        // 空表返回{}
        return str + "}";
    }

    /**
     * 添加元素。将元素x放进数组末尾 判断数组空间是否已满，若满则进行扩容。
     * 
     * @param x 需要添加的元素值
     */
    public void add(T x) {
        // source数组引用elements
        Object source[] = this.elements;
        if (this.N == elements.length) {
            this.elements = new Object[source.length * 2];
        }
        int i = 0;
        for (i = 0; i < this.N; i++) {
            this.elements[i] = source[i];
        }
        this.elements[N] = x;
        this.N++;
    }

    /**
     * 插入元素。 将元素x插入数组第i个位置， 判断数组空间是否已满，若满则进行扩容。
     * 
     * @param i 元素x插入的位置
     * @param x 插入的元素
     */
    public void insert(int i, T x) {
        // source数组引用elements
        Object source[] = this.elements;
        // 若数组空间已满，则扩充顺序表的数组容量
        if (this.N == elements.length) {
            this.elements = new Object[source.length * 2];
        }
        // 复制当前数组前i-1个元素
        for (int j = 0; j < i; j++) {
            this.elements[j] = source[j];
        }
        // 从i开始至表尾的元素向后移动，次序从后向前
        for (int j = this.N - 1; j >= i; j--) {
            this.elements[j + 1] = source[j];
        }
        this.elements[i] = x;
        this.N++;
    }

    /**
     * 删除指定元素。删除后返回被删除元素的索引， 若x不在顺序表内或顺序表为空，则返回-1
     * 
     * @param x 需要删除的元素值
     * @return
     */
    public int remove(T x) {
        int i = 0;
        // 找到元素x的索引
        for (i = 0; i < this.N; i++) {
            if (elements[i].equals(x)) {
                // 索引i后面的元素前移一个位置
                for (int j = i; j < this.N - 1; j++) {
                    this.elements[j] = this.elements[j + 1];
                }
                this.N--;
                // 返回被删除元素的索引
                return i;
            }
        }
        // 找不到x或顺序表为空时，返回-1
        return -1;
    }

    /**
     * 查询指定元素。执行该方法返回x的索引， 若x不在顺序表内或顺序表为空，则返回-1。
     * 
     * @param x 要查询的元素
     * @return
     */
    public int search(T x) {
        for (int i = 0; i < this.N; i++) {
            if (x.equals(this.elements[i])) {
                // 返回查询元素x的索引
                return i;
            }
        }
        // 找不到x或顺序表为空时，返回-1
        return -1;
    }

    /**
     * 判断是否为空。 判断第i个结点是否为空， 索引位置应在0到N之间。
     * 
     * @param i 要判断的结点
     * @return
     */
    public boolean isEmpty(int i) {
        if (i > this.N || i < 0) {
            return false;
        }
        return elements[i] == null;
    }

    /**
     * 获取顺序表的长度
     * 
     * @return
     */
    public int size() {
        return this.N;
    }

    /**
     * 反序遍历
     * 
     * @return
     */
    public String toReString() {
        String str = "{";
        if (this.N > 0) {
            str += this.elements[this.N - 1].toString();
        }
        for (int i = this.N - 1; i > 0; i--) {
            str += "," + this.elements[i - 1].toString();
        }
        // 空表返回{}
        return str + "}";
    }

    /**
     * 判断顺序表是否为空
     * 
     * @return
     */
    public boolean isEmpty() {
        return this.N == 0;
    }
}


// 测试
public class Test {
    public static void main(String[] args) {
        // 创建一个字符串数组，调用SequenceList的构造方法传入str参数
        String[] str = {"1","2","3","4","5","6"};
        SequenceList l = new SequenceList(str);
        
        // 一些方法的测试
        System.out.println(l.toString());
        l.add("t");
       System.out.println(l.toString());
    }
}
